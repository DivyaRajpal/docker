

DockerFile
Copy on Write Strategy
Environment Variables and Files


Create in specific Format as per the ask
docker ps -a --format "{{.ID}} {{.Image}}"
docker ps -a --format "{{.ID}} {{.Image}} {{.Command}}"

Get exact creation date of the Container
docker inspect -f "{{ .Created }}" mybuntu

docker inspect -f "{{.Created}} -- {{.HostConfig.CpuShares}} -- {{.State.Pid}} -- {{.NetworkSettings.IPAddress}}"  <<name of container>>


DockerFile Creation
Notepad DockerFile

ARG CODE_VERSION=latest
FROM ubuntu:$CODE_VERSION
MAINTAINER DHANANJAYAN
ENV descpn="This is new version"
RUN ["/bin/bash","-c","echo $descpn"]
CMD echo $descpn |wc -c

Step 3
docker build -t mydockcnt -f Dockerfile.txt .

docker inpsect mydockcnt
(Note the layers being created)

Step 4 
docker ps -a
docker image ls
[Paste the Image ID or store the Image ID of docker image ls]

Step 5
docker run <<image id>> 

38. Environment Variables
==========================
docker run -it -e client=DevOps-Docker-Class  -e IP=$(docker-machine ip) ubuntu /bin/bash
# echo $client
# echo $IP

39. Environment files
=====================
create envfile.txt
client=DevOps-Docker-Class
Location=Online

docker run -it --env-file envfile.txt --name mycontainer ubuntu /bin/bash
# echo $client 
# echo $Location

docker run -it --env-file envfile.txt -e uname=$(whoami) --name mycontainer1 ubuntu /bin/bash
# echo $client
# echo $location
# echo $uname

40. ENTRY POINT usage
=========================
docker run -it --entrypoint =/bin/ls ubuntu
docker run -it --entrypoint =/bin/ls ubuntu -l /bin
-- Did you observe - are you in shell ?



Example on copy on Write Strategy

======
cat > hello.sh
#! /bin/sh
echo "Hello from Shell from COWSTR"

Save and close file.

chmod +x hello.sh

Step 3
======
--notepad Dockerfile.base

FROM ubuntu:16.04
COPY ./app /app

Step 4
======
docker build -t ubuntumodified  -f Dockerfile.base .

Step 5
======
notepad Dockerfile
FROM ubuntumodified 
RUN ["/bin/bash","-c", "echo from DCK Second Layer"]

Step 6
======
docker build -t ubuntunew -f Dockerfile .

Step 7
=========
notepad Dockerfile1
FROM ubuntunew
COPY ./app /app
CMD ["/bin/sh","-c","./app/hello.sh"]

docker build -t ubuntuanother -f Dockerfile1 . 

docker ps -a 
docker image ls
docker history <<image id>>
--inspect image and sizes



Step 7
======
-- remove images

47. ENTRY POINT in Docker file

Step 1
=====
Create a directory - entpointeg
cd entpointeg

Step 2
======
--notepad Dockerfile
FROM ubuntu:latest
ENTRYPOINT ["top","-b"]
CMD ["-c"]

Step 3
=====
docker build -t newImg .
docker run -it newImg 
--(Observe the Output - Are you getting Process ID along with Threads) - How CMD and ENTRYPOINT acts together. 

48.
Step 1
FROM ubuntu:trusty
ENTRYPOINT ["/bin/ping","-c","3"]
CMD ["localhost"]

Step 2
docker build -t demoping -f dockerfile .

Step 3
docker run --rm demoping 
docker run --rm demoping $(docker-machine ip)

49.
ENV/ARG/ENVFILE

Step 1

FROM alpine
ARG a_version=20
RUN echo $a_version
ENV a_version_new=$a_version

Step 2
docker build -t newimgone -f  Dockerfile.txt --build-arg a_version=34 .

Step 3
docker run -it --rm newimgone ash




1.Volumes
  42. Master Slave Binding
  43. Volume Binding (OS)
  44. Volume Binding NodeJS 
  45. Duplex Binding
  46. ReadOnly Binding

2.Ports
  47. Ports
  48. More Docker Commands
  49. Registry Creation
  
3.Networking
  49. Networking Configuration
  50. Network Creation - Bridges
  51. UDF Networks

More commands to play
===================
1.Network Settings 
docker inspect -f "{{.NetworkSettings.IPAddress}}" myoraclelinux
docker ps -q | xargs docker inspect -f "{{.NetworkSettings.IPAddress}}"
docker inspect -f '{{.NetworkSettings.IPAddress}} --> {{.Name}}' $(docker ps -q)

2. Tar save /Load
docker commit myoraclelinux myoraimg
docker save -o a.tar myoraimg

docker rmi myoraimg
docker load < a.tar
docker run -it --rm myoraimg bash

3. Export /Import
docker export -o a1.tar  myoraclelinux
cat a1.tar | docker import - mynewcont
(refer what is mynewcont) ?
(can you try importing a saved file?)

4. Docker pause

docker run -dit --name myoracle oraclelinux:6
docker pause myoracle
--check for docker ps -a
docker inspect myoracle (what is the Status of State, Paused :true)
 docker exec -it myoracle bash 
???
docker unpause myoracle
docker inspect myoracle (what is the Status of State, Paused :true)
 docker exec -it myoracle bash 



8. Volumes
Master-Slave Binding

Step 1
=======
docker volume ls

Step 2
=======
docker run -it --name master-data -v backup:/backup ubuntu /bin/bash
--As it is --it , Interactive terminal , Shell of ubuntu should be enabled, check for backup directory created 
--by docker
# cd /backup
# cat > newfile
  This is backup file for test purpose.
# exit

Step 3
docker volume ls 
--Note backup volume 
docker inspect backup

Step 4
=========

docker run -it --name slave1 --volumes-from master-data ubuntu /bin/bash
# ls /backup
# cat /backup/newfile

--Volumes are mounted from master-data container into new container. This is volume container binding.
--tmpfs is limited to RHL binding, no source container, data is moved from tmp

Step 5
=======
--remove the volume
--remove container.


Exposing Ports:

Step1
=====
 docker run --name mynginx1 -d -v ~/nginxlogs:/var/log/nginx -p 5001:80 nginx

Step2
====
 Check for docker ps -a
 Open browser http://192.168.99.100:5001



Step 3
=======
 docker stop mynginx1
 docker rm mynginx1

12. Volumes 2
Volume Binding with OS

Step 1
======
create directory data in c:/users/<<your user directory/data
create sample.txt in data directory with messages.

Step 2
======
docker run -dit --name devmtest1 -v ~/data:/app fedora bash
# ls /app

-- refer files created in data directory available in app directory. This is binding container without volume.




13.
Mount Volume binding
(Duplex)

Step 1
=======
docker run -d -it --name devtest --mount type=bind,source=/c/Users/Dhananjayan/nodex,target=/app 
ubuntu bash

Step 2
======
docker exec -it devtest bash
#visit directory
docker inspect devtest (Refer Mounts Section)

Step 3
=======
Open another terminal, Visit Nodex directory - Keep changing the sourcedirectory See
Are you seeing the changes in bash as you reflect changes

Step 4
=======
Visit the bash of container - Create Directories from Files in container 
Do you reflect the changes in the directory of powershell ?

What is bind type in JSON , Can we look for a command ?
docker inspect -f "{{range  .Mounts}} {{.Type}}{{end}}" devtest
Now expand, to name and created date of the container ?
docker inspect -f "{{.Name}}{{.Created}}{{range .Mounts}} {{.Type}} {{end}}" devtest

Step 5
=======


Exit , Remove Containers

14.
Readonly Mounts

Step 1
======
 docker run -d -it --name devtestread --mount 
type=bind,source=/c/Users/Dhananjayan/nodex,target=/app,readonly ubuntu

Step 2
=======
 docker exec -it devtestread bash
 # cd app
 # mkdir newfiletestreaddir
 (What happens ??? )
 exit
Step 3
Remove containers.

Readonly Containers with volumes:

docker run -it --name myubun --read-only -v backup:/backup ubuntu bash
docker run -it --name myubun -v backup:/backup:ro ubuntu bash

16. Ports
Step 1
docker run -t -d --name webserver -p 80:80 ubuntu 

Step 2
docker port webserver
docker ps -a

Step 3
docker exec -it webserver /bin/bash

Step 4
#apt-get update
#apt-get install apache2 vim

Step 5
# cd /etc/apache2
# cat sites-enabled/000-default.conf 
-- Look for document root in the file The path should be /var/www/lib --> index.html

Step 6
rm index.html
cat > index.html
<h1> This is your webserver running from Docker </h1>

Step 7
service apache2 restart
exit

Step 8
docker ps -a
-- check for webserver container status
docker start webserver

Step 9

docker port webserver
curl $(docker-machine ip)
Browser --> Open http://127.0.0.1:80

Step 10
docker stop webserver
remove all containers

17.
Step 1
======
docker top <<Container ID>>
Provides PID of Running container

Step 2
======
Open a new shell (Powershell)
docker events 
(Run time status of events)

Step 3
======
From Docker terminal
Provide Docker start commands
What happens in real time status of events ?

Step 4
======
Update Configuration of Container at Runtime

docker inspect -f " {{ .HostConfig.KernelMemory}} {{.HostConfig.CpuShares}}" nodesample
docker update --cpu-shares 256 --kernel-memory 200M nodesample
docker inspect -f " {{ .HostConfig.KernelMemory}} {{.HostConfig.CpuShares}}" nodesample


22.
echo one two three | xargs mkdir
echo one two three | xargs -t rmdir
docker ps -a -q | xargs docker container inspect -f '{{ .Name }} {{ range .Mounts}} {{ .Type}} {{ .Name}} {{end}}'
